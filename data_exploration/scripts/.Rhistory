ggtitle(title_string) +
ylab("Ratings") + xlab("Perceived Complexity")
}
high_participant <- "55cc19c7fe3304000562562c"
highest_BMRQ <- "5fdee4d96a36576ca62e4518"
low_participant <- "572036a1fd3a5200093c126b"
lowest_BMRQ <- "607db957e9d570c7c2657b8d"
median_participant <- "5ecd4acdb218ec085c6eefe6"
plot_individual(high_participant)
plot_individual(low_participant)
plot_individual(highest_BMRQ)
plot_individual(lowest_BMRQ)
plot_individual(median_participant)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lme4)
library(lmerTest)
library(MatchIt)
library(ggplot2)
move <- read.csv(file = "../data/moveratings.csv")
pleasure <- read.csv(file = "../data/pleasureratings.csv")
master <- read.csv(file = "../data/SLfollowupscored.csv")
master$PASS_noaudio <- master$PASS_total - master$PASS_sound
# Calculate BMRQ with Absorption
absorption_cols = c('AIMS_current3', 'AIMS_current13', 'AIMS_current15', 'AIMS_current29')
absorb_df <- master[ ,c("ID", "BMRQ_total", "AIMS_current3_1", "AIMS_current13_1", "AIMS_current15_1", "AIMS_current29_1")]
master %>%
mutate(BMRQ_total_with_absorption = rowSums(across(where(is.numeric)))) %>%
mutate(BMRQ_absorption = BMRQ_total_with_absorption - BMRQ_total) ->
master
# Filter out participants with no MET scores
master <- master[complete.cases(master$BMRQ_total),]
master <- master[complete.cases(master$MET_rhythmicscore),]
hedonic_thresh <- mean(master$PASS_noaudio) + sd(master$PASS_noaudio)
hedonic_df <- master[which(master$PASS_noaudio < hedonic_thresh),]
mus_hedonic_thresh <- quantile(master$BMRQ_total_with_absorption, probs = c(.1), na.rm=TRUE)
master$anhedonic <- as.factor(as.numeric(master$BMRQ_total_with_absorption < mus_hedonic_thresh))
mus_anhedonic_df <- master[which(master$BMRQ_total_with_absorption < mus_hedonic_thresh),]
matched <- MatchIt::matchit(anhedonic ~ MET_rhythmicscore + MET_melodicscore + PASS_noaudio, data=master, method='nearest', ratio=1)
master$PASS_noaudio
matched <- MatchIt::matchit(anhedonic ~ MET_rhythmicscore + MET_melodicscore + PASS_noaudio, data=master, method='nearest', ratio=1)
# Filter out participants with no MET scores
master <- master[complete.cases(master$BMRQ_total),]
master <- master[complete.cases(master$MET_rhythmicscore),]
move <- read.csv(file = "../data/moveratings.csv")
pleasure <- read.csv(file = "../data/pleasureratings.csv")
master <- read.csv(file = "../data/SLfollowupscored.csv")
master$PASS_noaudio <- master$PASS_total - master$PASS_sound
# Calculate BMRQ with Absorption
absorption_cols = c('AIMS_current3', 'AIMS_current13', 'AIMS_current15', 'AIMS_current29')
absorb_df <- master[ ,c("ID", "BMRQ_total", "AIMS_current3_1", "AIMS_current13_1", "AIMS_current15_1", "AIMS_current29_1")]
master %>%
mutate(BMRQ_total_with_absorption = rowSums(across(where(is.numeric)))) %>%
mutate(BMRQ_absorption = BMRQ_total_with_absorption - BMRQ_total) ->
master
# Filter out participants with no MET scores
master <- master[complete.cases(master$BMRQ_total),]
master <- master[complete.cases(master$MET_rhythmicscore),]
hedonic_thresh <- mean(master$PASS_noaudio) + sd(master$PASS_noaudio)
hedonic_df <- master[which(master$PASS_noaudio < hedonic_thresh),]
mus_hedonic_thresh <- quantile(master$BMRQ_total_with_absorption, probs = c(.1), na.rm=TRUE)
master$anhedonic <- as.factor(as.numeric(master$BMRQ_total_with_absorption < mus_hedonic_thresh))
mus_anhedonic_df <- master[which(master$BMRQ_total_with_absorption < mus_hedonic_thresh),]
master$PASS_noaudio <- master$PASS_total - master$PASS_sound
# Calculate BMRQ with Absorption
absorption_cols = c('AIMS_current3', 'AIMS_current13', 'AIMS_current15', 'AIMS_current29')
absorb_df <- master[ ,c("ID", "BMRQ_total", "AIMS_current3_1", "AIMS_current13_1", "AIMS_current15_1", "AIMS_current29_1")]
master %>%
mutate(BMRQ_total_with_absorption = rowSums(across(where(is.numeric)))) %>%
mutate(BMRQ_absorption = BMRQ_total_with_absorption - BMRQ_total) %>%
na.omit() ->
master
hedonic_thresh <- mean(master$PASS_noaudio) + sd(master$PASS_noaudio)
hedonic_df <- master[which(master$PASS_noaudio < hedonic_thresh),]
master$PASS_noaudio <- master$PASS_total - master$PASS_sound
# Calculate BMRQ with Absorption
absorption_cols = c('AIMS_current3', 'AIMS_current13', 'AIMS_current15', 'AIMS_current29')
absorb_df <- master[ ,c("ID", "BMRQ_total", "AIMS_current3_1", "AIMS_current13_1", "AIMS_current15_1", "AIMS_current29_1")]
absorb_df %>%
mutate(BMRQ_total_with_absorption = rowSums(across(where(is.numeric)))) %>%
mutate(BMRQ_absorption = BMRQ_total_with_absorption - BMRQ_total) %>%->
master$PASS_noaudio <- master$PASS_total - master$PASS_sound
# Calculate BMRQ with Absorption
absorption_cols = c('AIMS_current3', 'AIMS_current13', 'AIMS_current15', 'AIMS_current29')
absorb_df <- master[ ,c("ID", "BMRQ_total", "AIMS_current3_1", "AIMS_current13_1", "AIMS_current15_1", "AIMS_current29_1")]
absorb_df %>%
mutate(BMRQ_total_with_absorption = rowSums(across(where(is.numeric)))) %>%
mutate(BMRQ_absorption = BMRQ_total_with_absorption - BMRQ_total) %>% ->
master$PASS_noaudio <- master$PASS_total - master$PASS_sound
# Calculate BMRQ with Absorption
absorption_cols = c('AIMS_current3', 'AIMS_current13', 'AIMS_current15', 'AIMS_current29')
absorb_df <- master[ ,c("ID", "BMRQ_total", "AIMS_current3_1", "AIMS_current13_1", "AIMS_current15_1", "AIMS_current29_1")]
absorb_df %>%
mutate(BMRQ_total_with_absorption = rowSums(across(where(is.numeric)))) %>%
mutate(BMRQ_absorption = BMRQ_total_with_absorption - BMRQ_total) <-
absorb_df
master$PASS_noaudio <- master$PASS_total - master$PASS_sound
# Calculate BMRQ with Absorption
absorption_cols = c('AIMS_current3', 'AIMS_current13', 'AIMS_current15', 'AIMS_current29')
absorb_df <- master[ ,c("ID", "BMRQ_total", "AIMS_current3_1", "AIMS_current13_1", "AIMS_current15_1", "AIMS_current29_1")]
absorb_df %>%
mutate(BMRQ_total_with_absorption = rowSums(across(where(is.numeric)))) %>%
mutate(BMRQ_absorption = BMRQ_total_with_absorption - BMRQ_total) ->
absorb_df
master$BMRQ_total_with_absorption = absorb_df$BMRQ_total_with_absroption
master$BMRQ_absorption = absorb_df$BMRQ_absroption
master <- master %>%
na.omit()
# Filter out participants with no MET scores
hedonic_thresh <- mean(master$PASS_noaudio) + sd(master$PASS_noaudio)
hedonic_df <- master[which(master$PASS_noaudio < hedonic_thresh),]
move <- read.csv(file = "../data/moveratings.csv")
pleasure <- read.csv(file = "../data/pleasureratings.csv")
master <- read.csv(file = "../data/SLfollowupscored.csv")
master$PASS_noaudio <- master$PASS_total - master$PASS_sound
# Calculate BMRQ with Absorption
absorption_cols = c('AIMS_current3', 'AIMS_current13', 'AIMS_current15', 'AIMS_current29')
absorb_df <- master[ ,c("ID", "BMRQ_total", "AIMS_current3_1", "AIMS_current13_1", "AIMS_current15_1", "AIMS_current29_1")]
absorb_df %>%
mutate(BMRQ_total_with_absorption = rowSums(across(where(is.numeric)))) %>%
mutate(BMRQ_absorption = BMRQ_total_with_absorption - BMRQ_total) ->
absorb_df
master$BMRQ_total_with_absorption = absorb_df$BMRQ_total_with_absroption
master$BMRQ_absorption = absorb_df$BMRQ_absroption
master <- master %>%
na.omit()
# Filter out participants with no MET scores
hedonic_thresh <- mean(master$PASS_noaudio) + sd(master$PASS_noaudio)
hedonic_df <- master[which(master$PASS_noaudio < hedonic_thresh),]
mus_hedonic_thresh <- quantile(master$BMRQ_total_with_absorption, probs = c(.1), na.rm=TRUE)
master$anhedonic <- as.factor(as.numeric(master$BMRQ_total_with_absorption < mus_hedonic_thresh))
mus_anhedonic_df <- master[which(master$BMRQ_total_with_absorption < mus_hedonic_thresh),]
matched <- MatchIt::matchit(anhedonic ~ MET_rhythmicscore + MET_melodicscore + PASS_noaudio, data=master, method='nearest', ratio=1)
move <- read.csv(file = "../data/moveratings.csv")
pleasure <- read.csv(file = "../data/pleasureratings.csv")
master <- read.csv(file = "../data/SLfollowupscored.csv")
master$PASS_noaudio <- master$PASS_total - master$PASS_sound
# Calculate BMRQ with Absorption
absorption_cols = c('AIMS_current3', 'AIMS_current13', 'AIMS_current15', 'AIMS_current29')
absorb_df <- master[ ,c("ID", "BMRQ_total", "AIMS_current3_1", "AIMS_current13_1", "AIMS_current15_1", "AIMS_current29_1")]
absorb_df %>%
mutate(BMRQ_total_with_absorption = rowSums(across(where(is.numeric)))) %>%
mutate(BMRQ_absorption = BMRQ_total_with_absorption - BMRQ_total) ->
absorb_df
master$BMRQ_total_with_absorption = absorb_df$BMRQ_total_with_absroption
master$BMRQ_absorption = absorb_df$BMRQ_absroption
master <- master %>%
na.omit()
# Filter out participants with no MET scores
hedonic_thresh <- mean(master$PASS_noaudio) + sd(master$PASS_noaudio)
hedonic_df <- master[which(master$PASS_noaudio < hedonic_thresh),]
move <- read.csv(file = "../data/moveratings.csv")
pleasure <- read.csv(file = "../data/pleasureratings.csv")
master <- read.csv(file = "../data/SLfollowupscored.csv")
s
master$PASS_noaudio <- master$PASS_total - master$PASS_sound
# Calculate BMRQ with Absorption
absorption_cols = c('AIMS_current3', 'AIMS_current13', 'AIMS_current15', 'AIMS_current29')
absorb_df <- master[ ,c("ID", "BMRQ_total", "AIMS_current3_1", "AIMS_current13_1", "AIMS_current15_1", "AIMS_current29_1")]
absorb_df %>%
mutate(BMRQ_total_with_absorption = rowSums(across(where(is.numeric)))) %>%
mutate(BMRQ_absorption = BMRQ_total_with_absorption - BMRQ_total) ->
absorb_df
absorb_df %>%
mutate(BMRQ_total_with_absorption = rowSums(across(where(is.numeric)))) %>%
mutate(BMRQ_absorption = BMRQ_total_with_absorption - BMRQ_total) %>%
select(c("ID", "BMRQ_total_with_absorption", "BMRQ_absorption"))->
absorb_df
master <- merge(master, absorb_df, on="ID")
master <- master %>%
na.omit()
move <- read.csv(file = "../data/moveratings.csv")
pleasure <- read.csv(file = "../data/pleasureratings.csv")
master <- read.csv(file = "../data/SLfollowupscored.csv")
master$PASS_noaudio <- master$PASS_total - master$PASS_sound
# Calculate BMRQ with Absorption
absorption_cols = c('AIMS_current3', 'AIMS_current13', 'AIMS_current15', 'AIMS_current29')
absorb_df <- master[ ,c("ID", "BMRQ_total", "AIMS_current3_1", "AIMS_current13_1", "AIMS_current15_1", "AIMS_current29_1")]
absorb_df %>%
mutate(BMRQ_total_with_absorption = rowSums(across(where(is.numeric)))) %>%
mutate(BMRQ_absorption = BMRQ_total_with_absorption - BMRQ_total) %>%
select(c("ID", "BMRQ_total_with_absorption", "BMRQ_absorption"))->
absorb_df
master <- merge(master, absorb_df, on="ID")
# Filter out participants with no MET scores
master <- drop_na(master, c(MET_rhythmicscore, MET_melodicscore))
hedonic_thresh <- mean(master$PASS_noaudio) + sd(master$PASS_noaudio)
hedonic_df <- master[which(master$PASS_noaudio < hedonic_thresh),]
mus_hedonic_thresh <- quantile(master$BMRQ_total_with_absorption, probs = c(.1), na.rm=TRUE)
master$anhedonic <- as.factor(as.numeric(master$BMRQ_total_with_absorption < mus_hedonic_thresh))
mus_anhedonic_df <- master[which(master$BMRQ_total_with_absorption < mus_hedonic_thresh),]
matched <- MatchIt::matchit(anhedonic ~ MET_rhythmicscore + MET_melodicscore + PASS_noaudio, data=master, method='nearest', ratio=1)
master$PASS_noaudio <- master$PASS_total - master$PASS_sound
# Calculate BMRQ with Absorption
absorption_cols = c('AIMS_current3', 'AIMS_current13', 'AIMS_current15', 'AIMS_current29')
absorb_df <- master[ ,c("ID", "BMRQ_total", "AIMS_current3_1", "AIMS_current13_1", "AIMS_current15_1", "AIMS_current29_1")]
absorb_df %>%
mutate(BMRQ_total_with_absorption = rowSums(across(where(is.numeric)))) %>%
mutate(BMRQ_absorption = BMRQ_total_with_absorption - BMRQ_total) %>%
select(c("ID", "BMRQ_total_with_absorption", "BMRQ_absorption"))->
absorb_df
master <- merge(master, absorb_df, on="ID")
# Filter out participants with no MET scores
master <- drop_na(master, c(MET_rhythmicscore, MET_melodicscore, PASS_noaudio))
hedonic_thresh <- mean(master$PASS_noaudio) + sd(master$PASS_noaudio)
hedonic_df <- master[which(master$PASS_noaudio < hedonic_thresh),]
mus_hedonic_thresh <- quantile(master$BMRQ_total_with_absorption, probs = c(.1), na.rm=TRUE)
master$anhedonic <- as.factor(as.numeric(master$BMRQ_total_with_absorption < mus_hedonic_thresh))
mus_anhedonic_df <- master[which(master$BMRQ_total_with_absorption < mus_hedonic_thresh),]
matched <- MatchIt::matchit(anhedonic ~ MET_rhythmicscore + MET_melodicscore + PASS_noaudio, data=master, method='nearest', ratio=1)
master$PASS_noaudio <- master$PASS_total - master$PASS_sound
# Calculate BMRQ with Absorption
absorption_cols = c('AIMS_current3', 'AIMS_current13', 'AIMS_current15', 'AIMS_current29')
absorb_df <- master[ ,c("ID", "BMRQ_total", "AIMS_current3_1", "AIMS_current13_1", "AIMS_current15_1", "AIMS_current29_1")]
absorb_df %>%
mutate(BMRQ_total_with_absorption = rowSums(across(where(is.numeric)))) %>%
mutate(BMRQ_absorption = BMRQ_total_with_absorption - BMRQ_total) %>%
select(c("ID", "BMRQ_total_with_absorption", "BMRQ_absorption"))->
absorb_df
master <- merge(master, absorb_df, on="ID")
# Filter out participants with no MET scores
master <- drop_na(master, any_of(MET_rhythmicscore, MET_melodicscore, PASS_noaudio))
master$PASS_noaudio <- master$PASS_total - master$PASS_sound
# Calculate BMRQ with Absorption
absorption_cols = c('AIMS_current3', 'AIMS_current13', 'AIMS_current15', 'AIMS_current29')
absorb_df <- master[ ,c("ID", "BMRQ_total", "AIMS_current3_1", "AIMS_current13_1", "AIMS_current15_1", "AIMS_current29_1")]
absorb_df %>%
mutate(BMRQ_total_with_absorption = rowSums(across(where(is.numeric)))) %>%
mutate(BMRQ_absorption = BMRQ_total_with_absorption - BMRQ_total) %>%
select(c("ID", "BMRQ_total_with_absorption", "BMRQ_absorption"))->
absorb_df
master <- merge(master, absorb_df, on="ID")
# Filter out participants with no MET scores
master <- drop_na(master, any_of(c(MET_rhythmicscore, MET_melodicscore, PASS_noaudio)))
master$PASS_noaudio <- master$PASS_total - master$PASS_sound
# Calculate BMRQ with Absorption
absorption_cols = c('AIMS_current3', 'AIMS_current13', 'AIMS_current15', 'AIMS_current29')
absorb_df <- master[ ,c("ID", "BMRQ_total", "AIMS_current3_1", "AIMS_current13_1", "AIMS_current15_1", "AIMS_current29_1")]
absorb_df %>%
mutate(BMRQ_total_with_absorption = rowSums(across(where(is.numeric)))) %>%
mutate(BMRQ_absorption = BMRQ_total_with_absorption - BMRQ_total) %>%
select(c("ID", "BMRQ_total_with_absorption", "BMRQ_absorption"))->
absorb_df
master <- merge(master, absorb_df, on="ID")
# Filter out participants with no MET scores
master <- drop_na(master, any_of(c(MET_rhythmicscore, MET_melodicscore, PASS_noaudio)))
master$PASS_noaudio <- master$PASS_total - master$PASS_sound
# Calculate BMRQ with Absorption
absorption_cols = c('AIMS_current3', 'AIMS_current13', 'AIMS_current15', 'AIMS_current29')
absorb_df <- master[ ,c("ID", "BMRQ_total", "AIMS_current3_1", "AIMS_current13_1", "AIMS_current15_1", "AIMS_current29_1")]
absorb_df %>%
mutate(BMRQ_total_with_absorption = rowSums(across(where(is.numeric)))) %>%
mutate(BMRQ_absorption = BMRQ_total_with_absorption - BMRQ_total) %>%
select(c("ID", "BMRQ_total_with_absorption", "BMRQ_absorption"))->
absorb_df
master <- merge(master, absorb_df, on="ID")
# Filter out participants with no MET scores
master <- drop_na(master, any_of(c("MET_rhythmicscore", "MET_melodicscore", "PASS_noaudio")))
hedonic_thresh <- mean(master$PASS_noaudio) + sd(master$PASS_noaudio)
hedonic_df <- master[which(master$PASS_noaudio < hedonic_thresh),]
matched <- MatchIt::matchit(anhedonic ~ MET_rhythmicscore + MET_melodicscore + PASS_noaudio, data=master, method='nearest', ratio=1)
sum(is.na(master$MET_melodicscore))
sum(is.na(master$MET_rhythmicscore))
sum(is.na(master$anhedonic))
# Filter out participants with no MET scores
master <- drop_na(master, any_of(c("anhedonic", "MET_rhythmicscore", "MET_melodicscore", "PASS_noaudio")))
hedonic_thresh <- mean(master$PASS_noaudio) + sd(master$PASS_noaudio)
hedonic_df <- master[which(master$PASS_noaudio < hedonic_thresh),]
mus_hedonic_thresh <- quantile(master$BMRQ_total_with_absorption, probs = c(.1), na.rm=TRUE)
master$anhedonic <- as.factor(as.numeric(master$BMRQ_total_with_absorption < mus_hedonic_thresh))
mus_anhedonic_df <- master[which(master$BMRQ_total_with_absorption < mus_hedonic_thresh),]
matched <- MatchIt::matchit(anhedonic ~ MET_rhythmicscore + MET_melodicscore + PASS_noaudio, data=master, method='nearest', ratio=1)
summary(matched)
df.match <- MatchIt::match.data(matched)[1:ncol(master)]
move %>%
select(ID, rating, stim) %>%
rename(move_rating = rating) ->
move_condensed
colnames(pleasure$SRQ_curr)
View(master)
groove_vars <- pleasure[,c(3,14,18:30)]
# Select necessary columns
groove_vars_cols <- colnames(groove_vars)
print(groove_vars_cols)
# Select necessary columns
groove_vars_cols <- c("stim", "PerceivedComplexity", "OnsetsTotal", "OnsetsBassDrum",
"OnsetsSnareDrum", "OnsetsCymbals", "Duration", "LoudnessRMS",
"InitialTempoBPM", "FinalTempoBPM", "TempoDriftBPM","AbsoluteTempoDriftBPM",
"MicrotimingSecondsSD", "MicrotimingBeatsSD", "tert")
groove_vars <- pleasure[, groove_vars_cols]
colnames(filtered_df)
filtered_df <- df.match_merged[-c(2:673,)]
df.match_merged <- merge(df.match, pleasure[, 2:14], by="ID")
filtered_df <- df.match_merged[-c(2:673,)]
filtered_df <- df.match_merged[-c(2:673),]
filtered_df <- df.match_merged[, -c(2:673)]
filtered_df <- df.match_merged[, -c(4:673)]
# Select necessary columns
pleasure_cols <- c("stim", "PerceivedComplexity", "OnsetsTotal", "OnsetsBassDrum",
"OnsetsSnareDrum", "OnsetsCymbals", "Duration", "LoudnessRMS",
"InitialTempoBPM", "FinalTempoBPM", "TempoDriftBPM","AbsoluteTempoDriftBPM",
"MicrotimingSecondsSD", "MicrotimingBeatsSD", "tert",
"ID", "SRQ_current_total", "SRQ_current_prosocialinteractions",
"SRQ_current_sociability")
filtered_df <- df.match_merged[, -c(4:673)]
necessary_pleasure_cols <- pleasure[, pleasure_cols]
small_pleasure_cols <- unique(pleasure_cols)
absorb_small <- absorb_df[,c("ID", "BMRQ_total_with_absorption", "BMRQ_absorption")]
#TODO: merge SRQ stuff into filtered_df
filtered_df <- merge(filtered_df, small_pleasure_cols, by=c("ID", "stim", "PerceivedComplexity"))
#TODO: merge SRQ stuff into filtered_df
filtered_df <- merge(filtered_df, small_pleasure_cols, by=c("ID", "stim"))
small_pleasure_cols <- unique(necessary_pleasure_cols)
#TODO: merge SRQ stuff into filtered_df
filtered_df <- merge(filtered_df, small_pleasure_cols, by=c("ID", "stim"))
#TODO: merge SRQ stuff into filtered_df
filtered_df <- merge(filtered_df, small_pleasure_cols, by=c("ID", "PerceivedComplexity", "stim"))
#TODO: merge SRQ stuff into filtered_df
filtered_df <- merge(filtered_df, small_pleasure_cols, by=c("ID", "stim"))
# Select necessary columns
pleasure_cols <- c("stim", "PerceivedComplexity", "OnsetsTotal", "OnsetsBassDrum",
"OnsetsSnareDrum", "OnsetsCymbals", "Duration", "LoudnessRMS",
"InitialTempoBPM", "FinalTempoBPM", "TempoDriftBPM","AbsoluteTempoDriftBPM",
"MicrotimingSecondsSD", "MicrotimingBeatsSD",
"ID", "SRQ_current_total", "SRQ_current_prosocialinteractions",
"SRQ_current_sociability")
necessary_pleasure_cols <- pleasure[, pleasure_cols]
small_pleasure_cols <- unique(necessary_pleasure_cols)
#TODO: merge SRQ stuff into filtered_df
filtered_df <- merge(filtered_df, small_pleasure_cols, by=c("ID", "stim"))
filtered_df <- df.match_merged[, -c(4:673)]
#TODO: merge SRQ stuff into filtered_df
filtered_df <- merge(filtered_df, small_pleasure_cols, by=c("ID", "stim"))
# Select necessary columns
pleasure_cols <- c("stim", "PerceivedComplexity", "OnsetsTotal", "OnsetsBassDrum",
"OnsetsSnareDrum", "OnsetsCymbals", "Duration", "LoudnessRMS",
"InitialTempoBPM", "FinalTempoBPM", "TempoDriftBPM","AbsoluteTempoDriftBPM",
"MicrotimingSecondsSD", "MicrotimingBeatsSD", "tert",
"ID", "SRQ_current_total", "SRQ_current_prosocialinteractions",
"SRQ_current_sociability")
filtered_df <- df.match_merged[, -c(4:673)]
necessary_pleasure_cols <- pleasure[, pleasure_cols]
small_pleasure_cols <- unique(necessary_pleasure_cols)
#TODO: merge SRQ stuff into filtered_df
filtered_df <- merge(filtered_df, small_pleasure_cols, by=c("ID", "stim"))
filtered_df <- merge(filtered_df, absorb_small, by=c("ID"))
filtered_df <- df.match_merged[, -c(4:673)]
necessary_pleasure_cols <- pleasure[, pleasure_cols]
small_pleasure_cols <- unique(necessary_pleasure_cols)
absorb_small <- absorb_df[,c("ID", "BMRQ_total_with_absorption", "BMRQ_absorption")]
# merge SRQ and groove stuff into filtered_df
filtered_df <- merge(filtered_df, small_pleasure_cols, by=c("ID", "stim"))
# Merge in Move columns
filtered_df <- merge(filtered_df, move_condensed, by=c("ID", "stim"))
filtered_df$anhedonic_contrast <- filtered_df$anhedonic
contrasts(filtered_df$anhedonic_contrast) <- c(-0.5, 0.5)
filtered_df <- within(filtered_df, tert <- relevel(as.factor(tert), ref = "Intermediate"))
colnames(filtered_df)
## TODO: add in SRQ_sociability and SRQ_prosocial and SRQ_total
filtered_df %>%
select(ID, stim, rating, move_rating, PerceivedComplexity, tert, anhedonic, anhedonic_contrast,BMRQ_total, BMRQ_emotion, BMRQ_sensorimotor, BMRQ_moodreg, BMRQ_musicseek, BMRQ_socialreward, Gold_musicalsophistication, MET_melodicscore, MET_rhythmicscore, PASS_total, PASS_noaudio, SRQ_current_sociability, SRQ_current_prosocialinteractions, SRQ_current_total, BMRQ_total_with_absorption, BMRQ_absorption) ->
matched_controls
# Select necessary columns
pleasure_cols <- c("stim", "OnsetsTotal", "OnsetsBassDrum",
"OnsetsSnareDrum", "OnsetsCymbals", "Duration", "LoudnessRMS",
"InitialTempoBPM", "FinalTempoBPM", "TempoDriftBPM","AbsoluteTempoDriftBPM",
"MicrotimingSecondsSD", "MicrotimingBeatsSD", "tert",
"ID", "SRQ_current_total", "SRQ_current_prosocialinteractions",
"SRQ_current_sociability")
filtered_df <- df.match_merged[, -c(4:673)]
necessary_pleasure_cols <- pleasure[, pleasure_cols]
small_pleasure_cols <- unique(necessary_pleasure_cols)
absorb_small <- absorb_df[,c("ID", "BMRQ_total_with_absorption", "BMRQ_absorption")]
# merge SRQ and groove stuff into filtered_df
filtered_df <- merge(filtered_df, small_pleasure_cols, by=c("ID", "stim"))
# Merge in Move columns
filtered_df <- merge(filtered_df, move_condensed, by=c("ID", "stim"))
filtered_df$anhedonic_contrast <- filtered_df$anhedonic
contrasts(filtered_df$anhedonic_contrast) <- c(-0.5, 0.5)
filtered_df <- within(filtered_df, tert <- relevel(as.factor(tert), ref = "Intermediate"))
colnames(filtered_df)
## TODO: add in SRQ_sociability and SRQ_prosocial and SRQ_total
filtered_df %>%
select(ID, stim, rating, move_rating, PerceivedComplexity, tert, anhedonic, anhedonic_contrast,BMRQ_total, BMRQ_emotion, BMRQ_sensorimotor, BMRQ_moodreg, BMRQ_musicseek, BMRQ_socialreward, Gold_musicalsophistication, MET_melodicscore, MET_rhythmicscore, PASS_total, PASS_noaudio, SRQ_current_sociability, SRQ_current_prosocialinteractions, SRQ_current_total, BMRQ_total_with_absorption, BMRQ_absorption) ->
matched_controls
write.csv(matched_controls, file="../data/filtered_essential_columns2.csv")
simple_master_df <- select(master, ID, anhedonic, BMRQ_total_with_absorption, BMRQ_absorption)
full_df <- pleasure[-c(1,5:702)]
colnames(full_df)
full_df_cols <- c("ID", "stim", "rating","BMRQ_total", "BMRQ_emotion", "BMRQ_sensorimotor",
"BMRQ_moodreg", "BMRQ_musicseek", "BMRQ_socialreward", "Gold_activeengagement",
"Gold_perceptualabilities", "Gold_musicaltraining", "Gold_singingabilities",
"Gold_emotion", "Gold_musicalsophistication", "PASS_total",
"PASS_sex", "PASS_eating", "PASS_touch", "PASS_feeling",
"PASS_sound", "PASS_vision", "PASS_movement", "PASS_temperature",
"PASS_general", "PASS_smell", "MET_melodicscore", "MET_rhythmicscore" )
full_df <- pleasure[c(full_df_cols),]
full_df <- pleasure[, c(full_df_cols)]
full_df <- merge(full_df, necessary_pleasure_cols, by="stim")
full_df <- merge(full_df, necessary_pleasure_cols, by=c("ID", "stim"))
full_df <- pleasure[, c(full_df_cols)]
full_df <- merge(full_df, necessary_pleasure_cols, by=c("ID", "stim"))
full_df <- merge(full_df, move_condensed, by=c("ID", "stim"))
full_df <- merge(full_df, simple_ahd_df, by="ID")
simple_master_df <- select(master, ID, anhedonic, BMRQ_total_with_absorption, BMRQ_absorption)
full_df <- merge(full_df, simple_ahd_df, by="ID")
full_df <- merge(full_df, simple_master_df, by="ID")
full_df$anhedonic_contrast <- as.factor(full_df$anhedonic)
full_df <- within(full_df, tert <- relevel(as.factor(tert), ref = "Intermediate"))
contrasts(full_df$anhedonic_contrast) <- c(-0.5, 0.5)
filtered_df <- within(full_df, tert <- relevel(as.factor(tert), ref = "Intermediate"))
colnames(full_df)
write.csv(full_df, "../data/full_dataframe2.csv")
library(tidyverse)
library('DescTools')
library(geosphere)
library(sp)
user_locations <- read_csv("../data/user_location_coordinates.csv")
user_observations <- read_csv("../data/user_location_type_count.csv")
setwd("~/Documents/DFG 2023/dfg-seasons/data_exploration/scripts")
user_locations <- read_csv("../data/user_location_coordinates.csv")
user_observations <- read_csv("../data/user_location_type_count.csv")
user_observations <- read_csv("../data/user_location_type_counts.csv")
View(user_observations)
head(user_observations[order(user_observations$count), ])
head(user_observations[order(user_observations$count, decreasing=FALSE), ])
user_observations[order(user_observations$count, decreasing=FALSE), ]
user_observations[order(user_observations$count, decreasing=TRUE), ]
user_observations[order(user_observations$count, decreasing=TRUE), ][0:10, c("count", "en_name", "scientific_name")]
common_plants <- user_observations[order(user_observations$count, decreasing=TRUE), ][0:10, c("count", "en_name", "scientific_name")]
library(rworldmap)
install.packages("rworldmap")
library(rworldmap)
# The single argument to this function, points, is a data.frame in which:
#   - column 1 contains the longitude in degrees
#   - column 2 contains the latitude in degrees
coords2country = function(points)
{
countriesSP <- getMap(resolution='low')
#countriesSP <- getMap(resolution='high') #you could use high res map from rworldxtra if you were concerned about detail
# convert our list of points to a SpatialPoints object
# pointsSP = SpatialPoints(points, proj4string=CRS(" +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"))
#setting CRS directly to that from rworldmap
pointsSP = SpatialPoints(points, proj4string=CRS(proj4string(countriesSP)))
# use 'over' to get indices of the Polygons object containing each point
indices = over(pointsSP, countriesSP)
# return the ADMIN names of each country
indices$ADMIN
#indices$ISO3 # returns the ISO3 code
#indices$continent   # returns the continent (6 continent model)
#indices$REGION   # returns the continent (7 continent model)
}
coords2country(data.frame(
"long" = 51.,
"lat" = 0
))
install.packages('tidygeocoder')
some_addresses <- tibble::tribble(
~name,                  ~addr,
"White House",          "1600 Pennsylvania Ave NW, Washington, DC",
"Transamerica Pyramid", "600 Montgomery St, San Francisco, CA 94111",
"Willis Tower",         "233 S Wacker Dr, Chicago, IL 60606"
)
# geocode the addresses
lat_longs <- some_addresses %>%
geocode(addr, method = 'osm', lat = latitude , long = longitude)
library(tidygeocoder)
some_addresses <- tibble::tribble(
~name,                  ~addr,
"White House",          "1600 Pennsylvania Ave NW, Washington, DC",
"Transamerica Pyramid", "600 Montgomery St, San Francisco, CA 94111",
"Willis Tower",         "233 S Wacker Dr, Chicago, IL 60606"
)
# geocode the addresses
lat_longs <- some_addresses %>%
geocode(addr, method = 'osm', lat = latitude , long = longitude)
#> Passing 3 addresses to the Nominatim single address geocoder
#> Query completed in: 3 seconds
reverse <- lat_longs %>%
reverse_geocode(lat = latitude, long = longitude, method = 'osm',
address = address_found, full_results = TRUE) %>%
select(-addr, -licence)
lat_longs %>%
reverse_geocode(lat = latitude, long = longitude, method = 'osm',
address = address_found, full_results = TRUE)
lat_longs %>%
reverse_geocode(lat = latitude, long = longitude, method = 'osm',
address = address_found, full_results = TRUE) %>%
select(country)
lat_longs %>%
reverse_geocode(lat = latitude, long = longitude, method = 'osm',
address = address_found, full_results = TRUE)
user_locations %>%
reverse_geocode(lat = lat, long = lng, method = "osm") %>%
select(location_id, lat, lng, state, country, country_code)
sample_location_tags <- user_locations[sample(nrow(user_locations), 1000), ]
sample_location_tags %>%
reverse_geocode(lat = lat, long = lng, method = "osm") %>%
select(location_id, lat, lng, state, country, country_code)
locations <- sample_location_tags %>%
reverse_geocode(lat = lat, long = lng, method = "osm")
sample_location_countries <- sample_location_tags %>%
reverse_geocode(lat = lat, long = lng, method = "osm")
# this will take ~82,000 seconds, or 22 hours. outsource to other team members?
sample_location_countries <- sample_location_tags %>%
reverse_geocode(lat = lat, long = lng, method = "osm", full_results = TRUE)
table(sample_location_countries$country)
country_freq_table <- table(sample_location_countries$country) %>%
as.data.frame() %>%
arrange(desc(Freq))
country_freq_table
head(common_plants)
